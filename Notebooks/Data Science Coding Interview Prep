{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/suryan5h/data-science-coding-interview-preparation?scriptVersionId=220835798\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"73f8486c","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-02-04T21:48:31.299839Z","iopub.status.busy":"2025-02-04T21:48:31.299296Z","iopub.status.idle":"2025-02-04T21:48:32.513868Z","shell.execute_reply":"2025-02-04T21:48:32.512638Z"},"papermill":{"duration":1.226679,"end_time":"2025-02-04T21:48:32.515991","exception":false,"start_time":"2025-02-04T21:48:31.289312","status":"completed"},"tags":[]},"outputs":[],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"markdown","id":"05f3c3fd","metadata":{"papermill":{"duration":0.005898,"end_time":"2025-02-04T21:48:32.528501","exception":false,"start_time":"2025-02-04T21:48:32.522603","status":"completed"},"tags":[]},"source":["# Python Questions"]},{"cell_type":"markdown","id":"b7fce6c2","metadata":{"papermill":{"duration":0.005969,"end_time":"2025-02-04T21:48:32.541169","exception":false,"start_time":"2025-02-04T21:48:32.5352","status":"completed"},"tags":[]},"source":["## Question 1: Top N Customers"]},{"cell_type":"markdown","id":"df35a621","metadata":{"papermill":{"duration":0.005915,"end_time":"2025-02-04T21:48:32.553298","exception":false,"start_time":"2025-02-04T21:48:32.547383","status":"completed"},"tags":[]},"source":["You are given a dataset containing credit card transactions. Each transaction has a transaction_id, customer_id, amount, and timestamp. Write a Python function that takes a list of transactions and returns the top N customers who have spent the most money.\n","\n","You can assume the input is a list of dictionaries, where each dictionary represents a transaction like this:\n","transactions = [ <br>\n","    {\"transaction_id\": 1, \"customer_id\": 101, \"amount\": 500, \"timestamp\": \"2024-01-01 10:00:00\"},<br>\n","    {\"transaction_id\": 2, \"customer_id\": 102, \"amount\": 200, \"timestamp\": \"2024-01-01 11:00:00\"},<br>\n","    {\"transaction_id\": 3, \"customer_id\": 101, \"amount\": 300, \"timestamp\": \"2024-01-02 09:30:00\"},<br>\n","    {\"transaction_id\": 4, \"customer_id\": 103, \"amount\": 700, \"timestamp\": \"2024-01-02 12:45:00\"},<br>\n","    {\"transaction_id\": 5, \"customer_id\": 102, \"amount\": 800, \"timestamp\": \"2024-01-03 14:00:00\"},<br>\n","]"]},{"cell_type":"markdown","id":"70370516","metadata":{"_kg_hide-input":false,"papermill":{"duration":0.005831,"end_time":"2025-02-04T21:48:32.566616","exception":false,"start_time":"2025-02-04T21:48:32.560785","status":"completed"},"tags":[]},"source":["**Step-by-Step Approach:**<br>\n","Aggregate the spending per customer – Use a dictionary to store the total amount spent by each customer.<br>\n","Sort the customers by total spending – Use Python's sorted() function with a custom sorting key.<br>\n","Return the top N customers – Use slicing to get the top N customers.<br>"]},{"cell_type":"code","execution_count":2,"id":"132ca959","metadata":{"_kg_hide-input":false,"execution":{"iopub.execute_input":"2025-02-04T21:48:32.582195Z","iopub.status.busy":"2025-02-04T21:48:32.581682Z","iopub.status.idle":"2025-02-04T21:48:32.592659Z","shell.execute_reply":"2025-02-04T21:48:32.590757Z"},"papermill":{"duration":0.022426,"end_time":"2025-02-04T21:48:32.595166","exception":false,"start_time":"2025-02-04T21:48:32.57274","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["[(102, 1000), (101, 800)]\n"]}],"source":["transactions = [\n","    {\"transaction_id\": 1, \"customer_id\": 101, \"amount\": 500, \"timestamp\": \"2024-01-01 10:00:00\"},\n","    {\"transaction_id\": 2, \"customer_id\": 102, \"amount\": 200, \"timestamp\": \"2024-01-01 11:00:00\"},\n","    {\"transaction_id\": 3, \"customer_id\": 101, \"amount\": 300, \"timestamp\": \"2024-01-02 09:30:00\"},\n","    {\"transaction_id\": 4, \"customer_id\": 103, \"amount\": 700, \"timestamp\": \"2024-01-02 12:45:00\"},\n","    {\"transaction_id\": 5, \"customer_id\": 102, \"amount\": 800, \"timestamp\": \"2024-01-03 14:00:00\"},\n","]\n","\n","from collections import defaultdict\n","\n","def top_n_spenders(transactions,N):\n","    # Step 1: Aggregate spending per customer\n","    spending = defaultdict(int)\n","    for txn in transactions:\n","        spending[txn['customer_id']] += txn['amount']\n","\n","    # Step 2: Sort customers by total spending (in descending order)\n","    sorted_spenders = sorted(spending.items(), key = lambda x: x[1], reverse=True)\n","\n","    # Step 3: Return top N customers\n","    return sorted_spenders[:N]\n","\n","# Test the code\n","top_spenders = top_n_spenders(transactions, 2)\n","print(top_spenders)"]},{"cell_type":"markdown","id":"bfc70a0b","metadata":{"execution":{"iopub.execute_input":"2025-01-30T05:09:07.465034Z","iopub.status.busy":"2025-01-30T05:09:07.464703Z","iopub.status.idle":"2025-01-30T05:09:07.470515Z","shell.execute_reply":"2025-01-30T05:09:07.46903Z","shell.execute_reply.started":"2025-01-30T05:09:07.465011Z"},"papermill":{"duration":0.005756,"end_time":"2025-02-04T21:48:32.608203","exception":false,"start_time":"2025-02-04T21:48:32.602447","status":"completed"},"tags":[]},"source":["**Useful Links** <br>\n","defaultdict vs dict: https://stackabuse.com/differences-between-pythons-defaultdict-and-dict/ <br>"]},{"cell_type":"markdown","id":"e78944ca","metadata":{"papermill":{"duration":0.006471,"end_time":"2025-02-04T21:48:32.622999","exception":false,"start_time":"2025-02-04T21:48:32.616528","status":"completed"},"tags":[]},"source":["## Question 2: Check string is palindrome or not"]},{"cell_type":"code","execution_count":3,"id":"b617a6d1","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:32.637993Z","iopub.status.busy":"2025-02-04T21:48:32.637544Z","iopub.status.idle":"2025-02-04T21:48:32.645459Z","shell.execute_reply":"2025-02-04T21:48:32.644089Z"},"papermill":{"duration":0.017939,"end_time":"2025-02-04T21:48:32.647156","exception":false,"start_time":"2025-02-04T21:48:32.629217","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["True"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["random_string = 'madam'\n","def check_palindrome(s):\n","    if s == s[::-1]:\n","        return True\n","    return False\n","\n","check_palindrome(random_string)"]},{"cell_type":"markdown","id":"ab75020b","metadata":{"papermill":{"duration":0.005912,"end_time":"2025-02-04T21:48:32.659551","exception":false,"start_time":"2025-02-04T21:48:32.653639","status":"completed"},"tags":[]},"source":["## Question 3: Check non-repeating first character"]},{"cell_type":"code","execution_count":4,"id":"fd2ae08d","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:32.673301Z","iopub.status.busy":"2025-02-04T21:48:32.672963Z","iopub.status.idle":"2025-02-04T21:48:32.679099Z","shell.execute_reply":"2025-02-04T21:48:32.677854Z"},"papermill":{"duration":0.015049,"end_time":"2025-02-04T21:48:32.680766","exception":false,"start_time":"2025-02-04T21:48:32.665717","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["d\n"]}],"source":["from collections import Counter\n","random_string = 'madame'\n","def check_non_repeating(s):\n","    my_dict = Counter(s)\n","    for item in my_dict.items():\n","        if item[1] == 1:\n","            return item[0]\n","\n","print(check_non_repeating(random_string))"]},{"cell_type":"markdown","id":"3065a6d1","metadata":{"papermill":{"duration":0.006034,"end_time":"2025-02-04T21:48:32.693201","exception":false,"start_time":"2025-02-04T21:48:32.687167","status":"completed"},"tags":[]},"source":["## Question 4: Group all anagrams together"]},{"cell_type":"code","execution_count":5,"id":"fb34fa43","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:32.707161Z","iopub.status.busy":"2025-02-04T21:48:32.706696Z","iopub.status.idle":"2025-02-04T21:48:32.713562Z","shell.execute_reply":"2025-02-04T21:48:32.712162Z"},"papermill":{"duration":0.016061,"end_time":"2025-02-04T21:48:32.715526","exception":false,"start_time":"2025-02-04T21:48:32.699465","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["[['abc', 'bac', 'cab'], ['xyz', 'yxz'], ['xyza']]\n"]}],"source":["input_list = ['abc','bac','xyz','xyza','yxz','cab']\n","from collections import defaultdict\n","def split_anagrams(input_list):\n","    my_dict = defaultdict(list)\n","    for item in input_list:\n","        keyword = ''.join(sorted(item))\n","        my_dict[keyword] = my_dict[keyword]+[item]\n","    return list(my_dict.values())\n","\n","print(split_anagrams(input_list))"]},{"cell_type":"markdown","id":"82ad0799","metadata":{"papermill":{"duration":0.006801,"end_time":"2025-02-04T21:48:32.728955","exception":false,"start_time":"2025-02-04T21:48:32.722154","status":"completed"},"tags":[]},"source":["# NumPy Questions"]},{"cell_type":"markdown","id":"958b4dcf","metadata":{"papermill":{"duration":0.006182,"end_time":"2025-02-04T21:48:32.74158","exception":false,"start_time":"2025-02-04T21:48:32.735398","status":"completed"},"tags":[]},"source":["## Question 1: Create a 5x5 numpy array with random integers between 1 and 100."]},{"cell_type":"code","execution_count":6,"id":"0b74bb11","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:32.756146Z","iopub.status.busy":"2025-02-04T21:48:32.755793Z","iopub.status.idle":"2025-02-04T21:48:32.767811Z","shell.execute_reply":"2025-02-04T21:48:32.766251Z"},"papermill":{"duration":0.021913,"end_time":"2025-02-04T21:48:32.76984","exception":false,"start_time":"2025-02-04T21:48:32.747927","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["array([[54, 10, 88, 74, 32],\n","       [66, 78, 50, 44, 83],\n","       [92, 98, 88, 49, 24],\n","       [43, 40, 33, 84, 84],\n","       [ 5, 87, 93, 68, 50]])"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["import numpy as np\n","random_array = np.random.randint(1,101,size=(5,5))\n","random_array"]},{"cell_type":"markdown","id":"3e319ff2","metadata":{"papermill":{"duration":0.006272,"end_time":"2025-02-04T21:48:32.782896","exception":false,"start_time":"2025-02-04T21:48:32.776624","status":"completed"},"tags":[]},"source":["## Question 2: Create a NumPy array of shape (3, 3) with values ranging from 1 to 9. Then calculate the mean of each column."]},{"cell_type":"code","execution_count":7,"id":"5097b540","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:32.799056Z","iopub.status.busy":"2025-02-04T21:48:32.798715Z","iopub.status.idle":"2025-02-04T21:48:32.806224Z","shell.execute_reply":"2025-02-04T21:48:32.804957Z"},"papermill":{"duration":0.017749,"end_time":"2025-02-04T21:48:32.808212","exception":false,"start_time":"2025-02-04T21:48:32.790463","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Array: [[8 1 3]\n"," [3 1 2]\n"," [9 4 2]]\n","Column Means: [6.66666667 2.         2.33333333]\n"]}],"source":["import numpy as np\n","random_array = np.random.randint(1,10,size=(3,3))\n","col_means = np.mean(random_array,axis=0)\n","print(\"Array:\", random_array)\n","print(\"Column Means:\", col_means)"]},{"cell_type":"markdown","id":"c2f98d89","metadata":{"papermill":{"duration":0.006579,"end_time":"2025-02-04T21:48:32.822011","exception":false,"start_time":"2025-02-04T21:48:32.815432","status":"completed"},"tags":[]},"source":["## Question 3: Given the following DataFrame, filter out rows where Salary is less than 50000, and group the remaining rows by Department to calculate the average Salary."]},{"cell_type":"code","execution_count":8,"id":"40ba78b5","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:32.837629Z","iopub.status.busy":"2025-02-04T21:48:32.837225Z","iopub.status.idle":"2025-02-04T21:48:32.867093Z","shell.execute_reply":"2025-02-04T21:48:32.865973Z"},"papermill":{"duration":0.039982,"end_time":"2025-02-04T21:48:32.869192","exception":false,"start_time":"2025-02-04T21:48:32.82921","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Employee</th>\n","      <th>Department</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Alice</td>\n","      <td>HR</td>\n","      <td>45000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bob</td>\n","      <td>IT</td>\n","      <td>60000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Charlie</td>\n","      <td>HR</td>\n","      <td>55000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>David</td>\n","      <td>IT</td>\n","      <td>70000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Eve</td>\n","      <td>Finance</td>\n","      <td>48000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Employee Department  Salary\n","0    Alice         HR   45000\n","1      Bob         IT   60000\n","2  Charlie         HR   55000\n","3    David         IT   70000\n","4      Eve    Finance   48000"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["# Sample DataFrame\n","data = {\n","    'Employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n","    'Department': ['HR', 'IT', 'HR', 'IT', 'Finance'],\n","    'Salary': [45000, 60000, 55000, 70000, 48000]\n","}\n","\n","df = pd.DataFrame(data)\n","df.head()"]},{"cell_type":"code","execution_count":9,"id":"8187b91b","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:32.885092Z","iopub.status.busy":"2025-02-04T21:48:32.884664Z","iopub.status.idle":"2025-02-04T21:48:32.903925Z","shell.execute_reply":"2025-02-04T21:48:32.902678Z"},"papermill":{"duration":0.029404,"end_time":"2025-02-04T21:48:32.905923","exception":false,"start_time":"2025-02-04T21:48:32.876519","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["Department\n","HR    55000.0\n","IT    65000.0\n","Name: Salary, dtype: float64"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["filtered_df = df[df['Salary'] >= 50000].groupby('Department')['Salary'].mean()\n","filtered_df"]},{"cell_type":"markdown","id":"638c6dbb","metadata":{"papermill":{"duration":0.006857,"end_time":"2025-02-04T21:48:32.920119","exception":false,"start_time":"2025-02-04T21:48:32.913262","status":"completed"},"tags":[]},"source":["## Question 4: Given a NumPy array, normalize it such that the values are scaled between 0 and 1."]},{"cell_type":"code","execution_count":10,"id":"a57ceedb","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:32.935687Z","iopub.status.busy":"2025-02-04T21:48:32.935239Z","iopub.status.idle":"2025-02-04T21:48:32.942087Z","shell.execute_reply":"2025-02-04T21:48:32.940718Z"},"papermill":{"duration":0.016998,"end_time":"2025-02-04T21:48:32.944038","exception":false,"start_time":"2025-02-04T21:48:32.92704","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["[0.   0.25 0.5  0.75 1.  ]\n"]}],"source":["import numpy as np\n","\n","# Example NumPy array\n","array = np.array([10, 20, 30, 40, 50])\n","\n","# Min-Max Normalization\n","normalized_array = (array - np.min(array)) / (np.max(array) - np.min(array))\n","\n","# Display the normalized array\n","print(normalized_array)"]},{"cell_type":"markdown","id":"f443c976","metadata":{"papermill":{"duration":0.006572,"end_time":"2025-02-04T21:48:32.957803","exception":false,"start_time":"2025-02-04T21:48:32.951231","status":"completed"},"tags":[]},"source":["## Question 5: Write a Python function to calculate the moving average of a given list of numbers with a specified window size.\n","\n","```\n","Example Input: [1, 2, 3, 4, 5, 6], Window Size = 3\n","Example Output: [2.0, 3.0, 4.0, 5.0]\n","```"]},{"cell_type":"code","execution_count":11,"id":"80734bbf","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:32.972684Z","iopub.status.busy":"2025-02-04T21:48:32.972208Z","iopub.status.idle":"2025-02-04T21:48:32.978936Z","shell.execute_reply":"2025-02-04T21:48:32.977753Z"},"papermill":{"duration":0.016063,"end_time":"2025-02-04T21:48:32.980665","exception":false,"start_time":"2025-02-04T21:48:32.964602","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["[2.5, 5.0, 4.5, 4.5]\n"]}],"source":["def find_ma(inp, wsize):\n","  ma = []\n","  for i in range(len(inp)-wsize+1):\n","    sum=0\n","    for j in range(i,wsize+i):\n","      sum+=inp[j]\n","    ma.append(float(sum/wsize))\n","  return ma\n","\n","print(find_ma([1,4,6,3,6],2))"]},{"cell_type":"markdown","id":"cb7fbdb7","metadata":{"execution":{"iopub.execute_input":"2025-02-04T12:29:45.036822Z","iopub.status.busy":"2025-02-04T12:29:45.036423Z","iopub.status.idle":"2025-02-04T12:29:45.044312Z","shell.execute_reply":"2025-02-04T12:29:45.04256Z","shell.execute_reply.started":"2025-02-04T12:29:45.036792Z"},"papermill":{"duration":0.007225,"end_time":"2025-02-04T21:48:32.995241","exception":false,"start_time":"2025-02-04T21:48:32.988016","status":"completed"},"tags":[]},"source":["## Question 6: You are given a dataset containing the ages of a group of people. Write a Python function to identify outliers in this dataset using the Interquartile Range (IQR) method.\n","\n","\n","```\n","Outliers are defined as any values that fall below\n","Q1−1.5×IQR or above\n","Q3+1.5×IQR, where\n","Q1 is the first quartile and\n","Q3 is the third quartile. Return the list of outliers.\n","```\n","\n","The ages are given below:\n","ages = [18, 22, 22, 25, 30, 30, 34, 40, 44, 50, 55, 60, 100]"]},{"cell_type":"code","execution_count":12,"id":"915aed10","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:33.012882Z","iopub.status.busy":"2025-02-04T21:48:33.012445Z","iopub.status.idle":"2025-02-04T21:48:33.023873Z","shell.execute_reply":"2025-02-04T21:48:33.022789Z"},"papermill":{"duration":0.022923,"end_time":"2025-02-04T21:48:33.025784","exception":false,"start_time":"2025-02-04T21:48:33.002861","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Lower Bound: -12.5\n","Upper Bound: 87.5\n","Outliers: [100]\n"]}],"source":["import numpy as np\n","\n","def detect_outliers_iqr(data):\n","    # Convert data to a NumPy array\n","    data = np.array(data)\n","    \n","    # Calculate Q1 (25th percentile) and Q3 (75th percentile)\n","    Q1 = np.percentile(data, 25)\n","    Q3 = np.percentile(data, 75)\n","    \n","    # Compute IQR\n","    IQR = Q3 - Q1\n","    \n","    # Define lower and upper bounds\n","    lower_bound = Q1 - 1.5 * IQR\n","    upper_bound = Q3 + 1.5 * IQR\n","    \n","    # Identify outliers\n","    outliers = data[(data < lower_bound) | (data > upper_bound)]\n","    print(\"Lower Bound:\", lower_bound)\n","    print(\"Upper Bound:\", upper_bound)\n","    \n","    return list(outliers)\n","\n","# Given ages data\n","ages = [18, 22, 22, 25, 30, 30, 34, 40, 44, 50, 55, 60, 100]\n","\n","# Detect outliers\n","outliers = detect_outliers_iqr(ages)\n","\n","print(\"Outliers:\", outliers)"]},{"cell_type":"markdown","id":"d213f214","metadata":{"papermill":{"duration":0.006826,"end_time":"2025-02-04T21:48:33.039707","exception":false,"start_time":"2025-02-04T21:48:33.032881","status":"completed"},"tags":[]},"source":["# EDA Questions"]},{"cell_type":"markdown","id":"a0b99f66","metadata":{"papermill":{"duration":0.00672,"end_time":"2025-02-04T21:48:33.053595","exception":false,"start_time":"2025-02-04T21:48:33.046875","status":"completed"},"tags":[]},"source":["## Question 1: Create a scatter plot using Matplotlib for the following data"]},{"cell_type":"code","execution_count":13,"id":"7ce18312","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:33.070187Z","iopub.status.busy":"2025-02-04T21:48:33.069809Z","iopub.status.idle":"2025-02-04T21:48:33.074876Z","shell.execute_reply":"2025-02-04T21:48:33.073171Z"},"papermill":{"duration":0.016241,"end_time":"2025-02-04T21:48:33.076888","exception":false,"start_time":"2025-02-04T21:48:33.060647","status":"completed"},"tags":[]},"outputs":[],"source":["x = [1, 2, 3, 4, 5]\n","y = [5, 7, 6, 8, 7]"]},{"cell_type":"code","execution_count":14,"id":"398c147e","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:33.093542Z","iopub.status.busy":"2025-02-04T21:48:33.093156Z","iopub.status.idle":"2025-02-04T21:48:33.474764Z","shell.execute_reply":"2025-02-04T21:48:33.473505Z"},"papermill":{"duration":0.39272,"end_time":"2025-02-04T21:48:33.476885","exception":false,"start_time":"2025-02-04T21:48:33.084165","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","plt.scatter(x,y,color='blue',marker='o', label=\"Data Points\")\n","\n","# Add labels and titles\n","plt.xlabel(\"X-axis\")\n","plt.ylabel(\"Y-axis\")\n","plt.title(\"Scatter Plot of provided data\")\n","\n","# Show legend\n","plt.legend()\n","\n","# Display plot\n","plt.show()"]},{"cell_type":"markdown","id":"7d6d5d4c","metadata":{"papermill":{"duration":0.007383,"end_time":"2025-02-04T21:48:33.491943","exception":false,"start_time":"2025-02-04T21:48:33.48456","status":"completed"},"tags":[]},"source":["## Question 2: Given a pandas DataFrame with missing values, replace the NaN in the column Age with the mean age."]},{"cell_type":"code","execution_count":15,"id":"dd5f4472","metadata":{"execution":{"iopub.execute_input":"2025-02-04T21:48:33.508655Z","iopub.status.busy":"2025-02-04T21:48:33.508257Z","iopub.status.idle":"2025-02-04T21:48:33.519946Z","shell.execute_reply":"2025-02-04T21:48:33.518781Z"},"papermill":{"duration":0.022123,"end_time":"2025-02-04T21:48:33.521847","exception":false,"start_time":"2025-02-04T21:48:33.499724","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>John</td>\n","      <td>28.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Doe</td>\n","      <td>31.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Jane</td>\n","      <td>35.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Name   Age\n","0  John  28.0\n","1   Doe  31.5\n","2  Jane  35.0"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["data = {'Name': ['John', 'Doe', 'Jane'],\n","        'Age': [28, None, 35]}\n","df = pd.DataFrame(data)\n","df['Age'] = df['Age'].fillna(df['Age'].mean())\n","df.head()"]},{"cell_type":"code","execution_count":null,"id":"5bc71642","metadata":{"papermill":{"duration":0.007887,"end_time":"2025-02-04T21:48:33.537849","exception":false,"start_time":"2025-02-04T21:48:33.529962","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30839,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"papermill":{"default_parameters":{},"duration":5.897743,"end_time":"2025-02-04T21:48:34.16632","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-02-04T21:48:28.268577","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}