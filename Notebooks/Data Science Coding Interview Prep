{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/suryan5h/data-science-coding-interview-preparation?scriptVersionId=220141414\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-31T19:01:37.867396Z","iopub.execute_input":"2025-01-31T19:01:37.867765Z","iopub.status.idle":"2025-01-31T19:01:38.971008Z","shell.execute_reply.started":"2025-01-31T19:01:37.867735Z","shell.execute_reply":"2025-01-31T19:01:38.969795Z"}},"outputs":[],"execution_count":1},{"cell_type":"markdown","source":"## Question 1: Top N Customers","metadata":{}},{"cell_type":"markdown","source":"You are given a dataset containing credit card transactions. Each transaction has a transaction_id, customer_id, amount, and timestamp. Write a Python function that takes a list of transactions and returns the top N customers who have spent the most money.\n\nYou can assume the input is a list of dictionaries, where each dictionary represents a transaction like this:\ntransactions = [ <br>\n    {\"transaction_id\": 1, \"customer_id\": 101, \"amount\": 500, \"timestamp\": \"2024-01-01 10:00:00\"},<br>\n    {\"transaction_id\": 2, \"customer_id\": 102, \"amount\": 200, \"timestamp\": \"2024-01-01 11:00:00\"},<br>\n    {\"transaction_id\": 3, \"customer_id\": 101, \"amount\": 300, \"timestamp\": \"2024-01-02 09:30:00\"},<br>\n    {\"transaction_id\": 4, \"customer_id\": 103, \"amount\": 700, \"timestamp\": \"2024-01-02 12:45:00\"},<br>\n    {\"transaction_id\": 5, \"customer_id\": 102, \"amount\": 800, \"timestamp\": \"2024-01-03 14:00:00\"},<br>\n]","metadata":{}},{"cell_type":"markdown","source":"**Step-by-Step Approach:**<br>\nAggregate the spending per customer – Use a dictionary to store the total amount spent by each customer.<br>\nSort the customers by total spending – Use Python's sorted() function with a custom sorting key.<br>\nReturn the top N customers – Use slicing to get the top N customers.<br>","metadata":{"_kg_hide-input":false}},{"cell_type":"code","source":"transactions = [\n    {\"transaction_id\": 1, \"customer_id\": 101, \"amount\": 500, \"timestamp\": \"2024-01-01 10:00:00\"},\n    {\"transaction_id\": 2, \"customer_id\": 102, \"amount\": 200, \"timestamp\": \"2024-01-01 11:00:00\"},\n    {\"transaction_id\": 3, \"customer_id\": 101, \"amount\": 300, \"timestamp\": \"2024-01-02 09:30:00\"},\n    {\"transaction_id\": 4, \"customer_id\": 103, \"amount\": 700, \"timestamp\": \"2024-01-02 12:45:00\"},\n    {\"transaction_id\": 5, \"customer_id\": 102, \"amount\": 800, \"timestamp\": \"2024-01-03 14:00:00\"},\n]\n\nfrom collections import defaultdict\n\ndef top_n_spenders(transactions,N):\n    # Step 1: Aggregate spending per customer\n    spending = defaultdict(int)\n    for txn in transactions:\n        spending[txn['customer_id']] += txn['amount']\n\n    # Step 2: Sort customers by total spending (in descending order)\n    sorted_spenders = sorted(spending.items(), key = lambda x: x[1], reverse=True)\n\n    # Step 3: Return top N customers\n    return sorted_spenders[:N]\n\n# Test the code\ntop_spenders = top_n_spenders(transactions, 2)\nprint(top_spenders)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T19:01:38.972352Z","iopub.execute_input":"2025-01-31T19:01:38.972987Z","iopub.status.idle":"2025-01-31T19:01:38.984809Z","shell.execute_reply.started":"2025-01-31T19:01:38.972939Z","shell.execute_reply":"2025-01-31T19:01:38.983452Z"},"_kg_hide-input":false},"outputs":[{"name":"stdout","text":"[(102, 1000), (101, 800)]\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"**Useful Links** <br>\ndefaultdict vs dict: https://stackabuse.com/differences-between-pythons-defaultdict-and-dict/ <br>","metadata":{"execution":{"iopub.status.busy":"2025-01-30T05:09:07.464703Z","iopub.execute_input":"2025-01-30T05:09:07.465034Z","iopub.status.idle":"2025-01-30T05:09:07.470515Z","shell.execute_reply.started":"2025-01-30T05:09:07.465011Z","shell.execute_reply":"2025-01-30T05:09:07.46903Z"}}},{"cell_type":"markdown","source":"## Question 2: Check string is palindrome or not","metadata":{}},{"cell_type":"code","source":"random_string = 'madam'\ndef check_palindrome(s):\n    if s == s[::-1]:\n        return True\n    return False\n\ncheck_palindrome(random_string)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T19:04:04.448261Z","iopub.execute_input":"2025-01-31T19:04:04.448692Z","iopub.status.idle":"2025-01-31T19:04:04.457703Z","shell.execute_reply.started":"2025-01-31T19:04:04.44866Z","shell.execute_reply":"2025-01-31T19:04:04.45584Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}],"execution_count":3},{"cell_type":"markdown","source":"## Question 3: Check non-repeating first character","metadata":{}},{"cell_type":"code","source":"from collections import Counter\nrandom_string = 'madame'\ndef check_non_repeating(s):\n    my_dict = Counter(s)\n    for item in my_dict.items():\n        if item[1] == 1:\n            return item[0]\n\nprint(check_non_repeating(random_string))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T20:01:04.344586Z","iopub.execute_input":"2025-01-31T20:01:04.344994Z","iopub.status.idle":"2025-01-31T20:01:04.352831Z","shell.execute_reply.started":"2025-01-31T20:01:04.344966Z","shell.execute_reply":"2025-01-31T20:01:04.351288Z"}},"outputs":[{"name":"stdout","text":"d\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"## Question 4: Group all anagrams together","metadata":{}},{"cell_type":"code","source":"input_list = ['abc','bac','xyz','xyza','yxz','cab']\nfrom collections import defaultdict\ndef split_anagrams(input_list):\n    my_dict = defaultdict(list)\n    for item in input_list:\n        keyword = ''.join(sorted(item))\n        my_dict[keyword] = my_dict[keyword]+[item]\n    return list(my_dict.values())\n\nprint(split_anagrams(input_list))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T20:01:39.861494Z","iopub.execute_input":"2025-01-31T20:01:39.861893Z","iopub.status.idle":"2025-01-31T20:01:39.86981Z","shell.execute_reply.started":"2025-01-31T20:01:39.861866Z","shell.execute_reply":"2025-01-31T20:01:39.868624Z"}},"outputs":[{"name":"stdout","text":"[['abc', 'bac', 'cab'], ['xyz', 'yxz'], ['xyza']]\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}